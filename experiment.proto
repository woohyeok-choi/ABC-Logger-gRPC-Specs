syntax = "proto3";

package kaist.iclab.abc;

option java_package = "kaist.iclab.abc.grpc";
option java_outer_classname = "ExperimentProtos";

import "google/protobuf/empty.proto";
import "time.proto";

message Experiment {
    enum Blind {
        UNKNOWN_BLINDNESS = 0;
        OPEN = 1;
        SINGLE_BLIND = 2;
        DOUBLE_BLIND = 3;
    }

    message Compensation {
        enum Type {
            UNKNOWN_TYPE = 0;
            NONE = 1;
            MONETARY = 2;
            VOUCHER = 3;
        }

        enum Unit {
            UNKNOWN_UNIT = 0;
            USD = 1;
            KRW = 2;
            JPY = 3;
            CNY = 4;
            EUR = 5;
        }

        oneof type {
            Type predefined_type = 1;
            string other_type = 2;
        }

        oneof unit {
            Unit predefined_unit = 3;
            string other_unit = 4;
        }

        int32 amount = 5;
        string description = 6;
    }

    message Group {
        string id = 1;
        string name = 2;
        string description = 3;
        oneof survey {
            string json = 4;
            string url = 5;
        }
    }

    message Detail {
        string description = 1;
        repeated Group groups = 2;
    }

    string id = 1;
    int64 registered_millis = 2;
    int64 deadline_millis = 3;
    string title = 4;
    string affiliation = 5;
    string web_site = 6;
    string email = 7;
    string phone_number = 8;
    int32 max_subjects = 9;
    int32 cur_subjects = 10;
    bool is_closed = 11;
    int64 duration_millis = 12;
    bool contains_weekend = 13;
    Compensation compensation = 14;
    Blind blind = 15;
    Detail detail = 16;

    message Query {
        message Select {
            string affiliation = 1;
            string email = 2;
            bool include_unavailable_experiments = 3; 
            bool include_detail = 4;
            TimeRange registered_millis = 5;
            int32 max_results = 6;
            bool is_descending_order = 7;
        }

        message One {
            string id = 1;
            bool include_detail = 2;
        }
    }

    message Collection {
        repeated Experiment experiments = 1;
        TimeRange registered_millis = 2;
        int32 n_results = 3;
        bool has_remaining = 4;
    }
}


service ExperimentOperations {
    rpc ReadExperiments(Experiment.Query.Select) returns (Experiment.Collection) { }
    rpc ReadExperiment(Experiment.Query.One) returns (Experiment) { }
    rpc CreateExperiment(Experiment) returns (Experiment) { }
    rpc UpdateExperiment(Experiment) returns (Experiment) { }
    rpc DeleteExperiment(Experiment.Query.One) returns (google.protobuf.Empty) { }
}
