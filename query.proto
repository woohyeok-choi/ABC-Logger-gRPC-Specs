syntax = "proto3";

package kaist.iclab.abclogger;

import "data.proto";
import "subject.proto";
import "common.proto";
import "heartbeat.proto";
import "statistic.proto";

option java_package = "kaist.iclab.abclogger.grpc";
option java_outer_classname = "QueryProtos";


message Query {
    message Data {
        repeated DataType data_type = 1;
        repeated Subject subject = 2;
        int64 from_timestamp = 5;
        int64 to_timestamp = 6;
        int32 limit = 7;
        bool is_ascending = 8;
    }
    
    message Subjects {
        repeated DataType data_type = 1;
        int64 from_timestamp = 2;
        int64 to_timestamp = 3;
        int32 limit = 4;
        bool is_ascending = 5;
    }

    message HeartBeats {
        repeated DataType data_type = 1;
        repeated Subject subject = 2;
        int64 from_timestamp = 3;
        int64 to_timestamp = 4;
        int32 limit = 5;
        bool is_ascending = 6;
    }

    message Statistics {
        repeated DataType data_type = 1;
        repeated Subject subject = 2;
        int64 from_timestamp = 3;
        int64 to_timestamp = 4;
    }
}

message Bulk {
    message Data {
        repeated Datum data = 1;
    }

    message Subjects {
        repeated Subject subject = 1;
    }

    message HeartBeats {
        repeated HeartBeat heart_beat = 1;
    }

    message Statistics {
        repeated Statistic statistic = 1;
    }
}

service DataOperations {
    rpc CreateDatum(Datum) returns (Empty) { }
    rpc CreateData(Bulk.Data) returns (Empty) { }
    rpc CreateDataAsStream(stream Datum) returns (Empty) { }

    rpc CreateHeartBeat(HeartBeat) returns (Empty) { }
    
    rpc ReadData(Query.Data) returns (Bulk.Data) { }
    rpc ReadSubjects(Query.Subjects) returns (Bulk.Subjects) { }
    rpc ReadHeartBeats(Query.HeartBeats) returns (Bulk.HeartBeats) { }

    rpc ReadDataAsStream(Query.Data) returns (stream Datum) { }
    rpc ReadSubjectsAsStream(Query.Subjects) returns (stream Subject) { }
    rpc ReadHeartBeatsAsStream(Query.HeartBeats) returns (stream HeartBeat) { }

    rpc ReadStatistic(Query.Statistics) returns (Bulk.Statistics) { }
}