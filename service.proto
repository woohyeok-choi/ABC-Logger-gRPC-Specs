syntax = "proto3";

package kaist.iclab.abclogger;

import "common.proto";
import "count.proto";
import "data_type.proto";
import "datum.proto";
import "heart_beat.proto";
import "hqs.proto";
import "subject.proto";

option java_package = "kaist.iclab.abclogger.grpc";
option java_outer_classname = "ServiceProtos";


message Query {
    enum Field {
        NOT_FIELD = 0;
        GROUP_NAME = 1;
        EMAIL = 2;
        INSTANCE_ID = 3;
        SOURCE = 4;
        DEVICE_MANUFACTURER = 5;
        DEVICE_MODEL = 6;
        DEVICE_VERSION = 7;
        DEVICE_OS = 8;
        APP_ID = 9;
        APP_VERSION = 10;
    }

    message Filter {
        Field field = 1;
        repeated string value = 2; 
    }

    message Data {
        repeated DataType data_type = 1;
        repeated Filter filter = 2;
        int64 from_timestamp = 3;
        int64 to_timestamp = 4;
        int32 limit = 5;
        bool is_ascending = 6;
    }
    
    message Subjects {
        repeated DataType data_type = 1;
        repeated Filter filter = 2;
        int64 from_timestamp = 3;
        int64 to_timestamp = 4;
        int32 limit = 5;
        bool is_ascending = 6;
    }
    
    message HeartBeats {
        repeated DataType data_type = 1;
        repeated Filter filter = 2;
        int64 from_timestamp = 3;
        int64 to_timestamp = 4;
        int32 limit = 5;
        bool is_ascending = 6;
    }
    
    message Counts {
        repeated DataType data_type = 1;
        repeated Filter filter = 2;
        int64 from_timestamp = 3;
        int64 to_timestamp = 4;
    }
    
    message Hqs {
        Subject subject = 1;
        repeated Filter reference = 2;
        int64 from_timestamp = 3;
        int64 to_timestamp = 4;
    }
}

message Bulk {
    message Data {
        repeated Datum data = 1;
    }

    message Subjects {
        repeated Subject subject = 1;
    }

    message HeartBeats {
        repeated HeartBeat heart_beat = 1;
    }
}

service HqsOperations {
    rpc GetPhysicalHqs(Query.Hqs) returns (PhysicalHqs) { }
    rpc GetSocialHqs(Query.Hqs) returns (SocialHqs) { }
    rpc GetDigitalHqs(Query.Hqs) returns (DigitalHqs) { }
}

service DataOperations {
    rpc CreateDatum(Datum) returns (Empty) { }
    rpc CreateData(Bulk.Data) returns (Empty) { }
    rpc CreateDataAsStream(stream Datum) returns (Empty) { }
    
    rpc ReadData(Query.Data) returns (Bulk.Data) { }
    rpc ReadDataAsStream(Query.Data) returns (stream Datum) { }
}

service SubjectOperations {
    rpc ReadSubjects(Query.Subjects) returns (Bulk.Subjects) { }
    rpc ReadSubjectsAsStream(Query.Subjects) returns (stream Subject) { }
}

service HeartBeatsOperation {
    rpc CreateHeartBeat(HeartBeat) returns (Empty) { }

    rpc ReadHeartBeats(Query.HeartBeats) returns (Bulk.HeartBeats) { }
    rpc ReadHeartBeatsAsStream(Query.HeartBeats) returns (stream HeartBeat) { }

    rpc ReadCount(Query.Counts) returns (Count) { }
}
